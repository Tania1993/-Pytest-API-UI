{
  "uid" : "390e6cf1466a63fe",
  "name" : "test_add_product_to_basket",
  "fullName" : "tests.UI-Tests.ProductPageTests.TestProductPage#test_add_product_to_basket",
  "historyId" : "98b4ebd380615e8587e955732e05b7c8",
  "time" : {
    "start" : 1644997933350,
    "stop" : 1644997952686,
    "duration" : 19336
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <ProductPageTests.TestProductPage object at 0x00000118FF3A72E0>, browser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"cba5bc99-6864-46a5-80d3-318088935449\")>\n\n    @pytest.mark.UI\n    def test_add_product_to_basket(self, browser):\n        product_page = ProductPage(browser)\n        product_page.open(url=self.url)\n        product_page.click_add_to_basket_button()\n        product_page.solve_quiz_and_get_code()\n    \n>       assert product_page.get_added_to_basket_product_name().text == product_page.get_product_name_value()\n\ntests\\UI-Tests\\ProductPageTests.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\UI-Tests\\pages\\product_page.py:44: in get_added_to_basket_product_name\n    return base_page.wait_until_element_present(*self.PRODUCT_NAME_MESSAGE)\ntests\\UI-Tests\\pages\\base_page.py:29: in wait_until_element_present\n    element = wait.until(EC.visibility_of_element_located((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cba5bc99-6864-46a5-80d3-318088935449\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000118FEB93160>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1644997927348,
      "stop" : 1644997933347,
      "duration" : 5999
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <ProductPageTests.TestProductPage object at 0x00000118FF3A72E0>, browser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"cba5bc99-6864-46a5-80d3-318088935449\")>\n\n    @pytest.mark.UI\n    def test_add_product_to_basket(self, browser):\n        product_page = ProductPage(browser)\n        product_page.open(url=self.url)\n        product_page.click_add_to_basket_button()\n        product_page.solve_quiz_and_get_code()\n    \n>       assert product_page.get_added_to_basket_product_name().text == product_page.get_product_name_value()\n\ntests\\UI-Tests\\ProductPageTests.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\UI-Tests\\pages\\product_page.py:44: in get_added_to_basket_product_name\n    return base_page.wait_until_element_present(*self.PRODUCT_NAME_MESSAGE)\ntests\\UI-Tests\\pages\\base_page.py:29: in wait_until_element_present\n    element = wait.until(EC.visibility_of_element_located((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cba5bc99-6864-46a5-80d3-318088935449\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000118FEB93160>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d8e2e9610e5740f0",
      "name" : "log",
      "source" : "d8e2e9610e5740f0.txt",
      "type" : "text/plain",
      "size" : 390
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1644997953012,
      "stop" : 1644997953754,
      "duration" : 742
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "UI"
  }, {
    "name" : "parentSuite",
    "value" : "tests.UI-Tests"
  }, {
    "name" : "suite",
    "value" : "ProductPageTests"
  }, {
    "name" : "subSuite",
    "value" : "TestProductPage"
  }, {
    "name" : "host",
    "value" : "EPUAVINW01D6"
  }, {
    "name" : "thread",
    "value" : "14668-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.UI-Tests.ProductPageTests"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "UI" ]
  },
  "source" : "390e6cf1466a63fe.json",
  "parameterValues" : [ ]
}